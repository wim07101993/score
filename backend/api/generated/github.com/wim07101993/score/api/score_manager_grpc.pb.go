// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: score_manager.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreManagerClient is the client API for ScoreManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreManagerClient interface {
	Update(ctx context.Context, opts ...grpc.CallOption) (ScoreManager_UpdateClient, error)
	Remove(ctx context.Context, opts ...grpc.CallOption) (ScoreManager_RemoveClient, error)
}

type scoreManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreManagerClient(cc grpc.ClientConnInterface) ScoreManagerClient {
	return &scoreManagerClient{cc}
}

func (c *scoreManagerClient) Update(ctx context.Context, opts ...grpc.CallOption) (ScoreManager_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScoreManager_ServiceDesc.Streams[0], "/score.ScoreManager/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &scoreManagerUpdateClient{stream}
	return x, nil
}

type ScoreManager_UpdateClient interface {
	Send(*ScoreFileChunk) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type scoreManagerUpdateClient struct {
	grpc.ClientStream
}

func (x *scoreManagerUpdateClient) Send(m *ScoreFileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scoreManagerUpdateClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scoreManagerClient) Remove(ctx context.Context, opts ...grpc.CallOption) (ScoreManager_RemoveClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScoreManager_ServiceDesc.Streams[1], "/score.ScoreManager/Remove", opts...)
	if err != nil {
		return nil, err
	}
	x := &scoreManagerRemoveClient{stream}
	return x, nil
}

type ScoreManager_RemoveClient interface {
	Send(*ScoreFileChunk) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type scoreManagerRemoveClient struct {
	grpc.ClientStream
}

func (x *scoreManagerRemoveClient) Send(m *ScoreFileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scoreManagerRemoveClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScoreManagerServer is the server API for ScoreManager service.
// All implementations must embed UnimplementedScoreManagerServer
// for forward compatibility
type ScoreManagerServer interface {
	Update(ScoreManager_UpdateServer) error
	Remove(ScoreManager_RemoveServer) error
	mustEmbedUnimplementedScoreManagerServer()
}

// UnimplementedScoreManagerServer must be embedded to have forward compatible implementations.
type UnimplementedScoreManagerServer struct {
}

func (UnimplementedScoreManagerServer) Update(ScoreManager_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedScoreManagerServer) Remove(ScoreManager_RemoveServer) error {
	return status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedScoreManagerServer) mustEmbedUnimplementedScoreManagerServer() {}

// UnsafeScoreManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreManagerServer will
// result in compilation errors.
type UnsafeScoreManagerServer interface {
	mustEmbedUnimplementedScoreManagerServer()
}

func RegisterScoreManagerServer(s grpc.ServiceRegistrar, srv ScoreManagerServer) {
	s.RegisterService(&ScoreManager_ServiceDesc, srv)
}

func _ScoreManager_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScoreManagerServer).Update(&scoreManagerUpdateServer{stream})
}

type ScoreManager_UpdateServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*ScoreFileChunk, error)
	grpc.ServerStream
}

type scoreManagerUpdateServer struct {
	grpc.ServerStream
}

func (x *scoreManagerUpdateServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scoreManagerUpdateServer) Recv() (*ScoreFileChunk, error) {
	m := new(ScoreFileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScoreManager_Remove_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScoreManagerServer).Remove(&scoreManagerRemoveServer{stream})
}

type ScoreManager_RemoveServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*ScoreFileChunk, error)
	grpc.ServerStream
}

type scoreManagerRemoveServer struct {
	grpc.ServerStream
}

func (x *scoreManagerRemoveServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scoreManagerRemoveServer) Recv() (*ScoreFileChunk, error) {
	m := new(ScoreFileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScoreManager_ServiceDesc is the grpc.ServiceDesc for ScoreManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score.ScoreManager",
	HandlerType: (*ScoreManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _ScoreManager_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Remove",
			Handler:       _ScoreManager_Remove_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "score_manager.proto",
}
