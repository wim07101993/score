// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: score_searcher.proto

package search

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreSearcherClient is the client API for ScoreSearcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreSearcherClient interface {
	SearchScores(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type scoreSearcherClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreSearcherClient(cc grpc.ClientConnInterface) ScoreSearcherClient {
	return &scoreSearcherClient{cc}
}

func (c *scoreSearcherClient) SearchScores(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/score.ScoreSearcher/SearchScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreSearcherServer is the server API for ScoreSearcher service.
// All implementations must embed UnimplementedScoreSearcherServer
// for forward compatibility
type ScoreSearcherServer interface {
	SearchScores(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedScoreSearcherServer()
}

// UnimplementedScoreSearcherServer must be embedded to have forward compatible implementations.
type UnimplementedScoreSearcherServer struct {
}

func (UnimplementedScoreSearcherServer) SearchScores(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScores not implemented")
}
func (UnimplementedScoreSearcherServer) mustEmbedUnimplementedScoreSearcherServer() {}

// UnsafeScoreSearcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreSearcherServer will
// result in compilation errors.
type UnsafeScoreSearcherServer interface {
	mustEmbedUnimplementedScoreSearcherServer()
}

func RegisterScoreSearcherServer(s grpc.ServiceRegistrar, srv ScoreSearcherServer) {
	s.RegisterService(&ScoreSearcher_ServiceDesc, srv)
}

func _ScoreSearcher_SearchScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreSearcherServer).SearchScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/score.ScoreSearcher/SearchScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreSearcherServer).SearchScores(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoreSearcher_ServiceDesc is the grpc.ServiceDesc for ScoreSearcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreSearcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score.ScoreSearcher",
	HandlerType: (*ScoreSearcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchScores",
			Handler:    _ScoreSearcher_SearchScores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "score_searcher.proto",
}
