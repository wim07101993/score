// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: score_manager.proto

package score

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreManagerClient is the client API for ScoreManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreManagerClient interface {
	CreateScoreFromMusicXml(ctx context.Context, opts ...grpc.CallOption) (ScoreManager_CreateScoreFromMusicXmlClient, error)
}

type scoreManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreManagerClient(cc grpc.ClientConnInterface) ScoreManagerClient {
	return &scoreManagerClient{cc}
}

func (c *scoreManagerClient) CreateScoreFromMusicXml(ctx context.Context, opts ...grpc.CallOption) (ScoreManager_CreateScoreFromMusicXmlClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScoreManager_ServiceDesc.Streams[0], "/score.ScoreManager/CreateScoreFromMusicXml", opts...)
	if err != nil {
		return nil, err
	}
	x := &scoreManagerCreateScoreFromMusicXmlClient{stream}
	return x, nil
}

type ScoreManager_CreateScoreFromMusicXmlClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*CreatedReply, error)
	grpc.ClientStream
}

type scoreManagerCreateScoreFromMusicXmlClient struct {
	grpc.ClientStream
}

func (x *scoreManagerCreateScoreFromMusicXmlClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scoreManagerCreateScoreFromMusicXmlClient) CloseAndRecv() (*CreatedReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreatedReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScoreManagerServer is the server API for ScoreManager service.
// All implementations must embed UnimplementedScoreManagerServer
// for forward compatibility
type ScoreManagerServer interface {
	CreateScoreFromMusicXml(ScoreManager_CreateScoreFromMusicXmlServer) error
	mustEmbedUnimplementedScoreManagerServer()
}

// UnimplementedScoreManagerServer must be embedded to have forward compatible implementations.
type UnimplementedScoreManagerServer struct {
}

func (UnimplementedScoreManagerServer) CreateScoreFromMusicXml(ScoreManager_CreateScoreFromMusicXmlServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateScoreFromMusicXml not implemented")
}
func (UnimplementedScoreManagerServer) mustEmbedUnimplementedScoreManagerServer() {}

// UnsafeScoreManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreManagerServer will
// result in compilation errors.
type UnsafeScoreManagerServer interface {
	mustEmbedUnimplementedScoreManagerServer()
}

func RegisterScoreManagerServer(s grpc.ServiceRegistrar, srv ScoreManagerServer) {
	s.RegisterService(&ScoreManager_ServiceDesc, srv)
}

func _ScoreManager_CreateScoreFromMusicXml_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScoreManagerServer).CreateScoreFromMusicXml(&scoreManagerCreateScoreFromMusicXmlServer{stream})
}

type ScoreManager_CreateScoreFromMusicXmlServer interface {
	SendAndClose(*CreatedReply) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type scoreManagerCreateScoreFromMusicXmlServer struct {
	grpc.ServerStream
}

func (x *scoreManagerCreateScoreFromMusicXmlServer) SendAndClose(m *CreatedReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scoreManagerCreateScoreFromMusicXmlServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScoreManager_ServiceDesc is the grpc.ServiceDesc for ScoreManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score.ScoreManager",
	HandlerType: (*ScoreManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateScoreFromMusicXml",
			Handler:       _ScoreManager_CreateScoreFromMusicXml_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "score_manager.proto",
}
